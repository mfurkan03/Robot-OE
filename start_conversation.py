from openai import OpenAI
from tts import generate_speech
import sys
from pydub import AudioSegment
from pydub.playback import _play_with_simpleaudio as play  # Ã–zel Ã§aÄŸrÄ±
import re
import time
from typing import List
import os
import threading
import queue

audio_queue = queue.Queue()

def get_api_key(filename):
    with open("api_key.txt", "r") as file:
        api_key = file.read().strip()
    return api_key

def main(filename):
    client = OpenAI(api_key=get_api_key(filename))

    messages = [{
        "role": "user",
        "content": "Sen ÅŸu an kaba bir rehin dÃ¼kkanÄ± sahibisin (biraz kaba davranmaya dikkat et, doÄŸallÄ±k iÃ§in) ve ben seninle birazdan sahip olduÄŸum bir Ã¼rÃ¼nle ilgili pazarlÄ±k yapacaÄŸÄ±m. Benimle selamlaÅŸarak ve ne satmak istediÄŸimi sorarak diyaloÄŸa baÅŸla. SatacaÄŸÄ±m Ã¼rÃ¼nÃ¼ benden olabildiÄŸince ucuza satÄ±n alman gerekiyor ve sana yalan da sÃ¶yleyebilirim bu Ã¼rÃ¼nÃ¼n fiyatÄ± hakkÄ±nda. Bu konularda araÅŸtÄ±rma yapÄ±p bana yapabileceÄŸin en ucuz teklifi yapman gerekiyor. Rehin dÃ¼kkanÄ± sahibi olduÄŸunu ve bir Ã¼rÃ¼nÃ¼ Ã¶lÃ¼cÃ¼lÃ¼k yaparak satÄ±n alman gerekiyor. Daha sonrasÄ±nda da bu Ã¼rÃ¼nÃ¼ benden satÄ±n alÄ±p beni ikna etmen gerekiyor. EÄŸer Ã¼rÃ¼n sana pahalÄ± gelirse satÄ±n alma. AyrÄ±ca, bÃ¼tÃ¼n sayÄ±larÄ± yazÄ±yla yaz, rakamla yazma!"
            }
        ]

    print("ğŸ’¬ Chat with the GPT-4o pawn shop bot. Type 'exit' to quit.\n")

    # Chat loop
    while True:
        # Get response from GPT-4o
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=1,
            max_tokens=1000,
            top_p=1,
        )

        reply = response.choices[0].message.content
        #print("PawnBot:", reply, "\n")
        
        generate(reply, ref_audio=r"C:\Users\alkan\OneDrive\MasaÃ¼stÃ¼\Dersler\term6\Foe\oe_f5tts_2.wav")  # Ses Ã¼retimi iÃ§in referans ses dosyasÄ±

        messages.append({"role": "assistant", "content": reply})

        user_input = input("You: ")
        #print("\n")
        if user_input.lower() in {"exit", "quit"}:
            print("ğŸ‘‹ Goodbye!")
            break
            
        messages.append({"role": "user", "content": user_input})
      # Bu satÄ±r, ses tamamen bitene kadar bekler

def audio_player_worker():
    while True:
        filename = audio_queue.get()
        if filename is None:  # KuyruÄŸa None gelirse thread kapanÄ±r
            break
        audio = AudioSegment.from_file(filename, format="wav")
        playback = play(audio)
        playback.wait_done()
        audio_queue.task_done()

# Player thread baÅŸlat
player_thread = threading.Thread(target=audio_player_worker, daemon=True)
player_thread.start()


def split_into_batches_smart(text: str, batch_size: int = 20) -> List[str]:
    # CÃ¼mlelere ayÄ±r
    sentences = re.split(r'(?<=[.!?])\s+', text)
    batches = []
    current_batch = []
    current_word_count = 0

    for sentence in sentences:
        words = sentence.strip().split()
        word_count = len(words)

        # EÄŸer bu cÃ¼mle eklendiÄŸinde batch sÄ±nÄ±rÄ± aÅŸÄ±lmÄ±yorsa, ekle
        if current_word_count + word_count <= batch_size:
            current_batch.append(sentence.strip())
            current_word_count += word_count
        else:
            # EÄŸer cÃ¼mle tek baÅŸÄ±na batch'ten bÃ¼yÃ¼kse, tek baÅŸÄ±na batch yap
            if word_count > batch_size:
                if current_batch:
                    batches.append(' '.join(current_batch))
                batches.append(sentence.strip())
                current_batch = []
                current_word_count = 0
            else:
                # Mevcut batch'i kapat, yeni batch baÅŸlat
                if current_batch:
                    batches.append(' '.join(current_batch))
                current_batch = [sentence.strip()]
                current_word_count = word_count

    # Son kalan batch'i ekle
    if current_batch:
        batches.append(' '.join(current_batch))

    return batches

def play_audio_threaded(filename: str):
    # Sadece filename'i kuyruÄŸa ekle
    audio_queue.put(filename)

def generate(response: str, ref_audio: str):
    output_dir = "output_wavs"
    if not os.path.exists(output_dir):
        os.mkdir(output_dir)

    batches = split_into_batches_smart(response, batch_size=18)

    for i, batch in enumerate(batches):
        filename = os.path.join(output_dir, f"batch_{i}.wav")
        generate_speech(batch, ref_audio, output_file=filename)
        print(f"[Batch {i+1}] {batch}")
        play_audio_threaded(filename)  # KuyruÄŸa ekle, thread oynatacak

# Ana program kapanÄ±rken player threadâ€™i kapat:
def close_audio_player():
    audio_queue.put(None)  # Ä°ÅŸaret gÃ¶nder (kapanÄ±ÅŸ sinyali)
    player_thread.join()
        # Ä°stersen kaldÄ±r â€“ gÃ¼venlik boÅŸluÄŸu

if __name__ == "__main__":
    main(sys.argv[0])


